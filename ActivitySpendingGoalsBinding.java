// Generated by view binder compiler. Do not edit!
package vcmsa.projects.expensetracker.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ScrollView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.appbar.MaterialToolbar;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import vcmsa.projects.expensetracker.R;

public final class ActivitySpendingGoalsBinding implements ViewBinding {
  @NonNull
  private final ScrollView rootView;

  @NonNull
  public final TextView textViewSpendingGoalsTitle;

  @NonNull
  public final MaterialToolbar toolbar;

  private ActivitySpendingGoalsBinding(@NonNull ScrollView rootView,
      @NonNull TextView textViewSpendingGoalsTitle, @NonNull MaterialToolbar toolbar) {
    this.rootView = rootView;
    this.textViewSpendingGoalsTitle = textViewSpendingGoalsTitle;
    this.toolbar = toolbar;
  }

  @Override
  @NonNull
  public ScrollView getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivitySpendingGoalsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivitySpendingGoalsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_spending_goals, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivitySpendingGoalsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.textViewSpendingGoalsTitle;
      TextView textViewSpendingGoalsTitle = ViewBindings.findChildViewById(rootView, id);
      if (textViewSpendingGoalsTitle == null) {
        break missingId;
      }

      id = R.id.toolbar;
      MaterialToolbar toolbar = ViewBindings.findChildViewById(rootView, id);
      if (toolbar == null) {
        break missingId;
      }

      return new ActivitySpendingGoalsBinding((ScrollView) rootView, textViewSpendingGoalsTitle,
          toolbar);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
//ðŸ”— Android Developer Portal  
//   https://developer.android.com  
//   (Official documentation, API guides, and Jetpack libraries)
//
//ðŸ”— Android Studio User Guide  
//   https://developer.android.com/studio/intro  
//   (Installation, setup, Gradle, and emulator instructions)
//
//ðŸ”— Android Codelabs  
//   https://developer.android.com/codelabs  
//   (Hands-on tutorials for Room, ViewModel, Compose, etc.)
//
//ðŸ”— Android API Reference  
//   https://developer.android.com/reference  
//   (Full SDK API list for Java & Kotlin)
//
//ðŸ”— Stack Overflow - Android  
//   https://stackoverflow.com/questions/tagged/android  
//   (Community Q&A, error troubleshooting)
//
//ðŸ”— Android GitHub Samples  
//   https://github.com/android  
//   (Official sample projects for Android features)
//
//ðŸ”— Kotlin Playground  
//   https://play.kotlinlang.org  
//   (Practice Kotlin syntax online)
//
//ðŸ”— JetBrains Academy  
//   https://www.jetbrains.com/academy/  
//   (Courses for Kotlin, Java, Android development)


